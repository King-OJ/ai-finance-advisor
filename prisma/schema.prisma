// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  userId            String
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id          String    @id @default(cuid())
  type        String
  category    String
  amount      Float
  date        DateTime
  description String?
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Asset {
  id           String    @id @default(cuid())
  portfolioId  String
  portfolio    Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  name         String?
  assetType    String    @default("stock")
  costBasis    Float
  currentPrice Float?
  shares       Float
  symbol       String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}

model Portfolio {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  description String?
  assets      Asset[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Goal {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name          String
  targetAmount  Float
  currentAmount Float     @default(0)
  deadline      DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String?
  password      String?
  image         String?
  emailVerified DateTime?
  role          String        @default("user")
  portfolios    Portfolio[]
  goals         Goal[]
  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?     @updatedAt
}
